*,
*:after,
*:before {
  box-sizing: border-box;
}

:root {
  --font-size: clamp(2rem, 8vmin + 1rem, 4rem);
  --line: color-mix(in lch, canvasText 35%, transparent);
  --base: 0.3;
  --accent: hsl(8 100% 55%);
  --header-height: 100vh;
  --overlay: transparent;
  color-scheme: light only;
}

html:not(:focus-within) {
  scroll-behavior: smooth;
}

body {
  min-height: 100vh;
  background: canvas;
  margin: 0;
  font-family: 'Migha-BoldExpandedCNTR', Arial, sans-serif !important;
  padding-right: 50px; /* Add space for side navigation */
}

@font-face {
  font-family: 'Migha-BoldExpandedCNTR';
  src: url('../../fonts/Migha-BoldExpandedCNTR.otf') format('opentype');
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

body::before {
  --size: 60px;
  content: '';
  height: 100vh;
  width: 100vw;
  position: fixed;
  background: linear-gradient(
        90deg,
        var(--line) 1px,
        transparent 1px var(--size)
      )
      50% 50% / var(--size) var(--size),
    linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
      var(--size) var(--size);
  mask: linear-gradient(-15deg, transparent 40%, blue);
  top: 0;
  transform-style: flat;
  pointer-events: none;
  z-index: -1;
}

:is(h1, h2) {
  font-size: clamp(2rem, 3vw + 1rem, 6rem);
}

[href='#read'] {
  position: absolute;
  bottom: 2rem;
  left: 50%;
  translate: -50% 0;
  width: 48px;
  aspect-ratio: 1;
  display: grid;
  place-items: center;
  color: canvasText;
}
[href='#read'] svg {
  width: 75%;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

[data-split] {
  font-size: var(--font-size);
  font-weight: 600;
}

header {
  min-height: var(--header-height);
  display: grid;
  place-items: center;
  position: relative;
  transform-origin: 50% 0%;
}

h1 {
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

h1 > span:first-of-type {
  font-size: 0.35em;
  color: var(--accent);
  text-transform: uppercase;
}

header > section {
  position: relative;
  top: 0;
  min-height: var(--header-height);
  width: 100%;
  translate: 0 -100%;
  display: grid;
  place-items: center;
  background: var(--overlay);
}

header > section::before {
  content: '';
  background: rgba(0, 0, 0, 0.2);
  position: absolute;
  inset: 0;
  translate: 0 100%;
}

video {
  position: sticky;
  top: 0;
  height: var(--header-height);
  width: 100vw;
  object-fit: cover;
  background: canvas;
}

footer {
  text-align: center;
  padding: 2rem;
  opacity: 0.875;
}

section:not(.reader) {
  min-height: 100vh;
  display: grid;
  place-items: center;
}

.content {
  position: sticky;
  top: 0;
  min-height: 100vh;
  width: 100ch;
  padding: 2rem 0;
  max-width: calc(100% - 4rem);
  display: grid;
  place-items: center;
  margin: 0 auto;
  line-height: 1;
}

.content span {
  opacity: calc(var(--base) + (var(--active, 0)));
  filter: blur(calc((1 - var(--active, 0)) * 5px));
  transition: opacity 0.5s, filter 0.7s;
  /* Initial state for all spans */
  --active: 0;
}

.reader {
  --thick: 0px;
  outline: var(--thick) dashed var(--accent);
  outline-offset: calc(var(--thick) * -1);

  /* The trick here is that --ppc could be dynamic */
  height: calc(
    ((var(--ppc) * var(--content-length) + (var(--pad) * var(--buffer))) * 1px) + 100vh
  );
}

h2 span {
  color: var(--accent);
}

@supports (animation-timeline: scroll()) {
  @property --active {
    inherits: true;
    initial-value: 0;
    syntax: '<number>';
  }

  .reader {
    view-timeline: --reader block;
  }

  .content span {
    opacity: 0.3;
    filter: blur(5px);
    animation: activate both ease-out;
    animation-timeline: --reader;
    /* Start animation when reader section is in view from the bottom */
    animation-range: entry 30% entry 60%;
    /* Stagger the animation based on the index */
    animation-delay: calc(var(--index) * 150ms);
  }

  @keyframes activate {
    from {
      --active: 0;
      filter: blur(5px);
      opacity: 0.3;
    }
    to {
      --active: 1;
      filter: blur(0);
      opacity: 1;
    }
  }

  header {
    animation: scale-down both ease-in;
    animation-timeline: view();
    animation-range: exit-crossing;
    view-timeline: --header;
  }

  @keyframes scale-down {
    to {
      scale: 0.8 0.8;
    }
  }
}

/* Mobile Responsive Adjustments */
@media (max-width: 768px) {
  body {
    padding-right: 40px;
  }
  
  .content {
    max-width: calc(100% - 3rem);
  }
  
  [data-split] {
    font-size: clamp(1.5rem, 6vmin + 0.8rem, 3.5rem);
  }
  
  h2 {
    font-size: clamp(1.6rem, 2.5vw + 0.8rem, 5rem);
    text-align: center;
  }
  
  :is(h1, h2) {
    font-size: clamp(1.8rem, 2.8vw + 0.9rem, 5.5rem);
  }
  
  .reader {
    height: auto;
    min-height: 50vh;
  }
}

@media (max-width: 480px) {
  body {
    padding-right: 35px;
  }
  
  .content {
    max-width: calc(100% - 2.5rem);
  }
  
  [data-split] {
    font-size: clamp(1.2rem, 5vmin + 0.6rem, 3rem);
  }
  
  h2 {
    font-size: clamp(1.4rem, 2vw + 0.7rem, 4rem);
  }
  
  :is(h1, h2) {
    font-size: clamp(1.5rem, 2.2vw + 0.8rem, 4.5rem);
  }
  
  [href='#read'] {
    width: 40px;
  }
}